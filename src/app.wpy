<style lang="less">
.container {
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: space-between;
  box-sizing: border-box;
}
</style>

<script>
import wepy from 'wepy'
import 'wepy-async-function'

export default class extends wepy.app {
  config = {
    pages: [
      'pages/tabs/home',
      'pages/tabs/cates',
      'pages/tabs/search',
      'pages/tabs/cart',
      'pages/tabs/me',
      // 商品列表页面
      'pages/goods_list'
    ],
    window: {
      backgroundTextStyle: 'dark',
      navigationBarBackgroundColor: '#d81e06',
      navigationBarTitleText: '月宝宝的ugo项目',
      navigationBarTextStyle: 'white'
    },
    tabBar: {
      // 选中的颜色
      selectedColor: '#d81e06',
      // 所有tab节点配置的数组
      list: [
        {
          pagePath: 'pages/tabs/home',
          text: '首页',
          iconPath: '/assets/icons/home.png',
          selectedIconPath: '/assets/icons/home-active.png'
        },
        {
          pagePath: 'pages/tabs/cates',
          text: '分类',
          iconPath: '/assets/icons/cart.png',
          selectedIconPath: '/assets/icons/cates-active.png'
        },
        {
          pagePath: 'pages/tabs/search',
          text: '搜索',
          iconPath: '/assets/icons/search.png',
          selectedIconPath: '/assets/icons/search-active.png'
        },
        {
          pagePath: 'pages/tabs/cart',
          text: '购物车',
          iconPath: '/assets/icons/cart.png',
          selectedIconPath: '/assets/icons/cart-active.png'
        },
        {
          pagePath: 'pages/tabs/me',
          text: '我的',
          iconPath: '/assets/icons/my.png',
          selectedIconPath: '/assets/icons/my-active.png'
        }
      ]
    },
    usingComponents: {
      'van-sidebar': './components/van/sidebar/index',
      'van-sidebar-item': './components/van/sidebar-item/index',
      'van-search': './components/van/search/index'
    }
  };

  globalData = {
    userInfo: null
  };

  constructor() {
    super()
    this.use('requestfix')
    // 通过这一行代码可以为异步的API开启promise功能
    // 这样，异步调用的结果 返回值是promise对象
    this.use('promisify')
    // 拦截器
    this.intercept('request', {
      // 发出请求时的回调函数
      config(p) {
        wepy.showLoading({
          title: '加载中'
        })
        return p
      },
      // 请求成功后的回调函数
      success(p) {
        // 必须返回响应数据对象，否则后续无法对响应数据进行处理
        return p
      },

      // 请求失败后的回调函数
      fail(p) {
        // 必须返回响应数据对象，否则后续无法对响应数据进行处理
        return p
      },
      // 请求完成时的回调函数（请求成功或失败都会执行）
      complete(p) {
        wepy.hideLoading()
        return p
      }
    })
  }

  onLaunch() {
    console.log('小程序启动了')
  }
}
</script>
